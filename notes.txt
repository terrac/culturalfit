1 pull down the code container and the list of links
2 (code container,code pointer, line)
3




1 rebuildcodecontainer using codecontainer test until gwt works
  a try creating a local copy (to test app engine issues)
  b otherwise just change over until success






1 viewerselect
  #a get a list of complimentary colors/two lists
  b replace each link for normal link with the light, highly linked with the dark
  c clicking on an individual spot clears the colors 
  d clicking on an individual link removes every link but that one
  
2 linking between multiple files
  a after a person has linked 10 things they get an additional mode
  b they get the ability to link between files
  c it shows two filenames and gives same buttons
  d toggle the mode with a dropdown at the top
  
3 viewerselect linking
  a to the left highly linked files are listed as links to click on
  b to the right normal linked files
  
  
4 viewerselect popular
  a an associated linkedcount,highlylinkedcount,not linked count with a reference
  b the reference points to an interface which will include line,comment,expected data
  c viewerselect will have tabs for your votes,
    newest votes ( a copy of whatever the latest with no users)
    popular votes (keeps track of count, highest count wins) 
    
5 lines
  a migrate line number logic to individual line references for future updates
  b make it so that lines are associated with a count so a specific increment is shown
      
6 comments
  a buttons on the left side for different modes
  b on normal mode you mouse over for comments
  c on other mode you mouse over for expected data
  d comments are voted on by voting between two comments, 
    with a top or bottom comment button
  e if only one comment exists for an area vote against nothing
  f button "add comment" to click on and then it highlights lines to click      
7 expected data
  a very similar to comments
  

1 finish viewerservlet

1 add comments (with a comment compare part (if just one comment then vote against nothing)
2 add expected data at point x (given y input) straigt up or down vote

2 expand across muliple files
















2 record links in profile
  a viewed 100 lines of code in tag x (average time 2 seconds) see just this user's links for this tag (here)
  b viewed 20 lines of code in tag y (average time 3 seconds) see just this user's links for this tag (here)
  c viewed 24 lines of code in tag z
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  

#1 make sure hs has actual data

a create a code pointer (to a specific line)
b create a user link (to the code pointer) (username, linked, isnext)
c write code to add links (to raw, and line)

4 record links in profile


5 view links mode
  a (a tree format with tags)
  b (then files)
  c the files then have lots of links 
  d the links go to individual pages that show the next line
    the next linked line, other linked lines on the same pages, and other lines
    on other pages

#1 code to pull all words from a file (break up all non abc characters into words)
#2 save by word and line
#3 buttons linked, next, not linked
  

(plane ticket, pill box)

1 pulls in files (done)
2 randomly generates cqps on the fly (variable length 1-10), but still use 
 scraping technquies at least most of the time (like with .py it might just look for 
 functions
3 code linking
 a break up file into a series of words
 b link two individual lines by words (link or don't link
 c link more complicated sets of lines


4 profile list tags links and examples




5 "I believe in" questions with yes or no

1 heavily repeat same question algorithm
  a starts on the same tags
  b repeatedly asks questions until a certain correctness is hit


1 more interesting examples (clear out again first for url)
  #a more hadoop
  b more mongodb
  c more jira
  d more bootstrap
(and expand those to be a lot)

2 think more about good questions
3 purge button






1 purge button

3 move simplefront to a uibinder














1 add login button

1 add https://raw.githubusercontent.com/apache/hadoop-common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/AggregateWordCount.java
2 tags java/hadoop (code automatically takes these, sorts them, and creates a profile)
 profile like java/hadoop 10 count, 50% correct, time to answer 3.33 seconds
3 purge button
4 save filename on adding files (and display) 


https://raw.githubusercontent.com/terrac/rikandroid/master/src/rik/shared/SUtil.java

1 tags are java/blah/spring/etc,java/blah,spring
2 Add in major fundamental projects, hadoop, spring, hibernate, etc
3 add a purge button (on the first 5 viewings of the question if 4 are purge then purge, otherwise if admin then purge, 
  if that doesn't occur then remove associated temporary data (



#1 pull out code adding logic into admin only file
#  a go into datastore and make my user an admin 
#2 make fewer cqps be created per file
#  a reject import
#3 create questions when generating this stuff


7  






1 object that says if string contains import then reject 
3 object that says if string is empty then reject

structure 

function dosomething(string)
	return bool
	
object that contains variables to determine fitness
(random chance of doing it per cqp)
(chance of doing it if it is a certain type)
(chance of doing it if the lines contain x)
	

1 object that replaces one type with another type
2 object that replaces two strings with each other



1 complicated curating mechanism based on a darwinian approach (ie it has lots of variables)
  a described in general terms on the site (with maybe some of the framework code available
  b so like variable a would be 90% chance of rejecting an import statement
  b would be the length of the code to look at
  c would be etc
  
2 up and down votes then hit the model and it changes based on that, saving various things
  (each file is built off of a new model based on the existing successful models)
  
3 general statistics showing rejected models    






1 think about best initial question algorithm
  a cqp also contains the actual questions and whether they are correct or incorrect
  b it also shows the actual answer after you answer it
  c then you can like or dislike the question (correct answer with highlights shown after
  
2 code as a puzzle
  a in this case you click on individual lines and sort them into the correct order
    













4 correctness, time














#2 maybe make buttons big (add bootstrap labels, maybe remove gwt css altogether)
#3 start answering questions

1 redo errors (cuds are individual and not tree based
2 take that and then do profile






1 profile page
  a onclick clear contents and show a vp
  b that will have a hp that has the top level tag
  c then underneath it a list of hps inside a hp that have lower level tags
  d








#1 assuming that actual results will be random on website, write a little list get random just to test (but not to use)
2 answer question (adds to profile, create profile to see

1 profile
2 novice, intermediate etc based on percentages
3 overall number of things done, break down by tags
4 average time for all



















1 verify if question is being sent back
2 see if it needs to be actually shown
3 etc


























1 start deleting extra files
2 build a page with a button saying "new user" and then below that a coding square (with two buttons below that)
3 build in bootstrap 3 (put html code in pages, pull those from ids, have bootstrap 3 js file)
4 build a profile interface that shows the language (which is seperate from tags) and the tags underneath
5 it shows the amount answered for each one, a total amount answered, a total percentage correct, a total time spent

6 a place where you enter in concepts, these concepts then turn into questions
  (note you don't worry about repeats, you just try to make them less likely)
  
7   















1 make the display page display a question
2 on answer make the current cqp with appropriate related tags be stored in the profile.
3 calculate %s and tags and display a profile page


#1 make the algorithm randomly pick a questionpointer
#2 make it return a usable format to the question display




3 on the submit page create a code container and point the question pointers to it
4 add tags to code container
#1 make codecontainer.java run through the loop an create some question pointers

#1 create codealgorithm
#2 put a list of code question pointers in it


5 main page uses an algorithm not used (algorithms point to the next one created in order
 , on submit pulls an algoirthm without a pointer and assigns the newest one to it
 
6 page that pulls first one, runs through it till complete, then pulls next, with questions 



1 test 
  a http://localhost:8888/c/codingScramble
  b http://localhost:8888/c/codingScrambleSubmit

2 write the servlet for submit that
	a generic algorithm creator
      1 when submitting a code file, also create an algorithm with the entire list of code
      2 adds the tags to code container
2 make the main page automatically select a random algorithm and start going through it  
3 profile
  a list all of the % by algorithm
  b add in tags
  c add an organized mode where the tags are by the top tag, and then the ones underneath



1 create a new get basic scramble page to async interact with
2 create a submit page, with a comma delimited tag list
3 make the servlet serve up that page with the appropriate root id
4 on submit a code container is created and code question pointers are created
  a iterate through and create based on length
  b attach all tags (which, the first one is the top level tag, all others are sub tags)
5 algorithm picks question (another object, simplest is a just a list)
  a algorithms have a % complete and don't get repeated if they have the completed = true
  b first if there aren't any user algorithms, then you call on a method to pull one back and 
    add it
  c then just call on the algorithm which goes through its list
6 profile takes all user algorithms and adds them together to make page        


1 have algorithms that pick a random set of questions
2 have a % complete on them
3 sum up algorithms associated tags into a profile k


1 do a http request on a couple of github files (if hard then host locally)
2 have it look for several relatively dense lines (ie do a trim and see if length > 20,
  grab 4 lines and calculate avg length 
3 page that has two buttons, each with the lines of code on them, it does a red or green popunder for correct
4 one button is scrambled, one isn't
5 preserve registration system, but don't require registration to answer questions, and get rid of temporary user id
6 give a running total along the bottom of blue/red for successes vs failures
7 if logged in then save stats, overall stats are most important 
8 tag by language


7 move onto new id with new url

